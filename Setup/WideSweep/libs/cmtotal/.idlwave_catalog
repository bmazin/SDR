;;
;; IDLWAVE catalog for library markwardt
;; Automatically Generated -- do not edit.
;; Created by idlwave_catalog on Wed Jan 21 01:55:31 2009
;;
(setq idlwave-library-catalog-libname "markwardt")
(setq idlwave-library-catalog-routines
 '(("mpfit_dummy" pro nil (lib "mpfit.pro" nil "markwardt") "%s" (nil))
   ("mpfit_resetprof" pro nil (lib "mpfit.pro" nil "markwardt") "%s" (nil))
   ("mpfit_setmachar" pro nil (lib "mpfit.pro" nil "markwardt") "%s" (nil ("double")))
   ("mpfit_call" fun nil (lib "mpfit.pro" nil "markwardt") "Result = %s(fcn, x, fjac)" (nil ("_EXTRA")))
   ("mpfit_fdjac2" fun nil (lib "mpfit.pro" nil "markwardt") "Result = %s(fcn, x, fvec, step, ulimited, ulimit, dside)" (nil ("autoderiv") ("dstep") ("epsfcn") ("FUNCTARGS") ("iflag") ("ifree") ("xall")))
   ("mpfit_enorm" fun nil (lib "mpfit.pro" nil "markwardt") "Result = %s(vec)" (nil))
   ("mpfit_qrfac" pro nil (lib "mpfit.pro" nil "markwardt") "%s, a, ipvt, rdiag, acnorm" (nil ("pivot")))
   ("mpfit_qrsolv" pro nil (lib "mpfit.pro" nil "markwardt") "%s, r, ipvt, diag, qtb, x, sdiag" (nil))
   ("mpfit_lmpar" fun nil (lib "mpfit.pro" nil "markwardt") "Result = %s(r, ipvt, diag, qtb, delta, x, sdiag)" (nil ("par")))
   ("mpfit_tie" pro nil (lib "mpfit.pro" nil "markwardt") "%s, p" (nil))
   ("mpfit_defprint" pro nil (lib "mpfit.pro" nil "markwardt") "%s, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18" (nil ("_EXTRA") ("format") ("unit")))
   ("mpfit_defiter" pro nil (lib "mpfit.pro" nil "markwardt") "%s, fcn, x, iter, fnorm" (nil ("_EXTRA") ("dof") ("format") ("FUNCTARGS") ("iterkeybyte") ("iterprint") ("iterstop") ("parinfo") ("pformat") ("quiet")))
   ("mpfit_parinfo" pro nil (lib "mpfit.pro" nil "markwardt") "%s, parinfo, tnames, tag, values" (nil ("default") ("n_param") ("status")))
   ("mpfit_covar" fun nil (lib "mpfit.pro" nil "markwardt") "Result = %s(rr, ipvt)" (nil ("tol")))
   ("mpfit" fun nil (lib "mpfit.pro" nil "markwardt") "Result = %s(fcn, xall)" (nil ("autoderivative") ("bestnorm") ("covar") ("diag") ("dof") ("epsfcn") ("errmsg") ("external_fjac") ("external_fvec") ("external_init") ("external_state") ("factor") ("fastnorm") ("ftol") ("FUNCTARGS") ("gtol") ("iterargs") ("iterkeystop") ("iterproc") ("iterstop") ("maxiter") ("nfev") ("nfree") ("niter") ("nocatch") ("nocovar") ("npegged") ("nprint") ("parinfo") ("perror") ("proc") ("query") ("quiet") ("rescale") ("resdamp") ("SCALE_FCN") ("STATUS") ("xtol")))
   ("mpfitfun_eval" fun nil (lib "mpfitfun.pro" nil "markwardt") "Result = %s(p, dp)" (nil ("_EXTRA")))
   ("mpfitfun_cash" pro nil (lib "mpfitfun.pro" nil "markwardt") "%s, resid, dresid" (nil))
   ("mpfitfun" fun nil (lib "mpfitfun.pro" nil "markwardt") "Result = %s(fcn, x, y, err, p)" (nil ("_EXTRA") ("BESTNORM") ("CASH") ("covar") ("dof") ("ERRMSG") ("FUNCTARGS") ("NAN") ("nfev") ("nfree") ("niter") ("npegged") ("parinfo") ("perror") ("query") ("quiet") ("STATUS") ("WEIGHTS") ("yfit")))
   ("mpfit2dfun_eval" fun nil (lib "mpfit2dfun.pro" nil "markwardt") "Result = %s(p, dp)" (nil ("_EXTRA")))
   ("mpfit2dfun" fun nil (lib "mpfit2dfun.pro" nil "markwardt") "Result = %s(fcn, x, y, z, err, p)" (nil ("_EXTRA") ("BESTNORM") ("covar") ("dof") ("ERRMSG") ("FUNCTARGS") ("nfev") ("nfree") ("niter") ("npegged") ("parinfo") ("perror") ("query") ("quiet") ("STATUS") ("WEIGHTS") ("yfit")))
   ("mpcurvefit_eval" fun nil (lib "mpcurvefit.pro" nil "markwardt") "Result = %s(p, dp)" (nil ("_EXTRA")))
   ("mpcurvefit" fun nil (lib "mpcurvefit.pro" nil "markwardt") "Result = %s(x, y, wts, p, perror)" (nil ("_EXTRA") ("chisq") ("covar") ("dof") ("errmsg") ("ftol") ("FUNCTARGS") ("function_name") ("iter") ("itmax") ("nfev") ("nfree") ("nocovar") ("noderivative") ("parinfo") ("query") ("QUIET") ("STATUS") ("tol") ("yerror")))
   ("mpevalexpr" fun nil (lib "mpfitexpr.pro" nil "markwardt") "Result = %s(x, p)" (nil ("functargs")))
   ("mpfitexpr_eval" fun nil (lib "mpfitexpr.pro" nil "markwardt") "Result = %s(p)" (nil ("_EXTRA")))
   ("mpfitexpr" fun nil (lib "mpfitexpr.pro" nil "markwardt") "Result = %s(expr, x, y, err, p)" (nil ("_EXTRA") ("BESTNORM") ("covar") ("dof") ("errmsg") ("functargs") ("nfev") ("nfree") ("niter") ("npegged") ("parinfo") ("perror") ("query") ("quiet") ("STATUS") ("WEIGHTS") ("yfit")))
   ("tnmin_dummy" pro nil (lib "tnmin.pro" nil "markwardt") "%s" (nil))
   ("tnmin_setmachar" pro nil (lib "tnmin.pro" nil "markwardt") "%s" (nil ("double")))
   ("tnmin_parinfo" pro nil (lib "tnmin.pro" nil "markwardt") "%s, parinfo, tnames, tag, values" (nil ("default") ("n_param") ("status")))
   ("tnmin_tie" pro nil (lib "tnmin.pro" nil "markwardt") "%s, p" (nil))
   ("tnmin_autoder" fun nil (lib "tnmin.pro" nil "markwardt") "Result = %s(fcn, x, dx)" (nil ("dside")))
   ("tnmin_call" fun nil (lib "tnmin.pro" nil "markwardt") "Result = %s(fcn, x1, dx)" (nil ("fullparam_")))
   ("tnmin_enorm" fun nil (lib "tnmin.pro" nil "markwardt") "Result = %s(vec)" (nil))
   ("tnmin_initpc" pro nil (lib "tnmin.pro" nil "markwardt") "%s, diagb, emat, n, upd1, yksk, gsk, yrsr, lreset" (nil))
   ("tnmin_ssbfgs" pro nil (lib "tnmin.pro" nil "markwardt") "%s, n, gamma, sj, yj, hjv, hjyj, yjsj, yjhyj, vsj, vhyj, hjp1v" (nil))
   ("tnmin_msolve" pro nil (lib "tnmin.pro" nil "markwardt") "%s, g, y, n, upd1, yksk, gsk, yrsr, lreset, first, hyr, hyk, ykhyk, yrhyr" (nil))
   ("tnmin_gtims" pro nil (lib "tnmin.pro" nil "markwardt") "%s, v, gv, n, x, g, fcn, first, delta, accrcy, xnorm, xnew" (nil))
   ("tnmin_ndia3" pro nil (lib "tnmin.pro" nil "markwardt") "%s, n, e, v, gv, r, vgv" (nil))
   ("tnmin_fix" pro nil (lib "tnmin.pro" nil "markwardt") "%s, whlpeg, whupeg, z" (nil))
   ("tnmin_modlnp" pro nil (lib "tnmin.pro" nil "markwardt") "%s, zsol, gv, r, v, diagb, emat, x, g, zk, n, niter, maxit, nmodif, nlincg, upd1, yksk, gsk, yrsr, lreset, fcn, whlpeg, whupeg, accrcy, gtp, gnorm, xnorm, xnew" (nil))
   ("tnmin_step1" fun nil (lib "tnmin.pro" nil "markwardt") "Result = %s(fnew, fm, gtp, smax, epsmch)" (nil))
   ("tnmin_getptc" pro nil (lib "tnmin.pro" nil "markwardt") "%s, big, small, rtsmll, reltol, abstol, tnytol, fpresn, eta, rmu, xbnd, u, fu, gu, xmin, fmin, gmin, xw, fw, gw, a, b, oldf, b1, scxbnd, e, step, factor, braktd, gtest1, gtest2, tol, ientry, itest" (nil))
   ("tnmin_linder" pro nil (lib "tnmin.pro" nil "markwardt") "%s, n, fcn, small, epsmch, reltol, abstol, tnytol, eta, sftbnd, xbnd, p, gtp, x, f, alpha, g, iflag, xnew" (nil))
   ("tnmin_defiter" pro nil (lib "tnmin.pro" nil "markwardt") "%s, fcn, x, iter, fnorm" (nil ("_EXTRA") ("deriv") ("dprint") ("fmt") ("FUNCTARGS") ("maximize") ("pfixed") ("quiet")))
   ("tnmin" fun nil (lib "tnmin.pro" nil "markwardt") "Result = %s(fcn, xall)" (nil ("autoderivative") ("bestmin") ("epsabs") ("epsrel") ("errmsg") ("fastnorm") ("fguess") ("functargs") ("iterargs") ("iterderiv") ("iterproc") ("maximize") ("maxiter") ("maxnfev") ("nfev") ("niter") ("nocatch") ("nprint") ("parinfo") ("quiet") ("status")))
   ("gauss1" fun nil (lib "gauss1.pro" nil "markwardt") "Result = %s(x, p)" (nil ("_EXTRA") ("peak") ("skew")))
   ("cmps_form_Draw_Coords" pro nil (lib "cmps_form.pro" nil "markwardt") "%s, drawpixperunit, xoff, yoff, xsize, ysize" (nil))
   ("cmps_form_Real_Coords" pro nil (lib "cmps_form.pro" nil "markwardt") "%s, drawpixperunit, xoff, yoff, xsize, ysize" (nil))
   ("cmps_form_Select_File" pro nil (lib "cmps_form.pro" nil "markwardt") "%s, event" (nil))
   ("cmps_form_PlotBox_Coords" fun nil (lib "cmps_form.pro" nil "markwardt") "Result = %s(xsize, ysize, xoff, yoff, drawpixperunit)" (nil))
   ("cmps_form_conv_pscoord" pro nil (lib "cmps_form.pro" nil "markwardt") "%s, info, xpagesize, ypagesize" (nil ("tohuman") ("toidl")))
   ("cmps_form_papernames" fun nil (lib "cmps_form.pro" nil "markwardt") "Result = %s" (nil))
   ("cmps_form_select_papersize" pro nil (lib "cmps_form.pro" nil "markwardt") "%s, papertype, xpagesize, ypagesize" (nil ("inches") ("index") ("landscape")))
   ("cmps_form_load_configs" pro nil (lib "cmps_form.pro" nil "markwardt") "%s, defaultpaper, configs" (nil))
   ("cmps_form_Update_Info" pro nil (lib "cmps_form.pro" nil "markwardt") "%s, info" (nil ("_EXTRA") ("set")))
   ("cmps_form_draw_box" pro nil (lib "cmps_form.pro" nil "markwardt") "%s, xsize, ysize, xoff, yoff, info" (nil))
   ("cmps_form_draw_form" pro nil (lib "cmps_form.pro" nil "markwardt") "%s, info" (nil ("nobox")))
   ("cmps_form_Null_Events" pro nil (lib "cmps_form.pro" nil "markwardt") "%s, event" (nil))
   ("cmps_form_What_Button_Type" fun nil (lib "cmps_form.pro" nil "markwardt") "Result = %s(event)" (nil))
   ("cmps_form_What_Button_Pressed" fun nil (lib "cmps_form.pro" nil "markwardt") "Result = %s(event)" (nil))
   ("cmps_form_What_Button_Released" fun nil (lib "cmps_form.pro" nil "markwardt") "Result = %s(event)" (nil))
   ("cmps_form_NumEvents" pro nil (lib "cmps_form.pro" nil "markwardt") "%s, event" (nil))
   ("cmps_form_Move_Box" pro nil (lib "cmps_form.pro" nil "markwardt") "%s, event" (nil))
   ("cmps_form_Grow_Box" pro nil (lib "cmps_form.pro" nil "markwardt") "%s, event" (nil))
   ("cmps_form_Box_Events" pro nil (lib "cmps_form.pro" nil "markwardt") "%s, event" (nil))
   ("cmps_form_predef_events" pro nil (lib "cmps_form.pro" nil "markwardt") "%s, event" (nil))
   ("cmps_form_Event" pro nil (lib "cmps_form.pro" nil "markwardt") "%s, event" (nil))
   ("cmps_form" fun nil (lib "cmps_form.pro" nil "markwardt") "Result = %s(xoffset, yoffset)" (nil ("aspect") ("Bits_Per_Pixel") ("button_names") ("button_sel") ("Cancel") ("Color") ("Create") ("DefaultPaper") ("Defaults") ("Encapsulated") ("Filename") ("Help") ("Inches") ("Initialize") ("Landscape") ("LocalDefaults") ("NoCommon") ("pagebox") ("PaperSize") ("parent") ("PreDefined") ("preserve_aspect") ("select") ("XOffset") ("xpagesize") ("XSize") ("YOffset") ("ypagesize") ("YSize")))
   ("NULL_EVENTS" pro nil (lib "xwindow.pro" nil "markwardt") "%s, event" (nil))
   ("XWINDOW_ALERT" fun nil (lib "xwindow.pro" nil "markwardt") "Result = %s(message)" (nil ("XOffSet") ("YOffSet")))
   ("XWINDOW_COLOR_PROTECTION" pro nil (lib "xwindow.pro" nil "markwardt") "%s, event" (nil))
   ("XWINDOW_CONFIGURATION_EVENTS" pro nil (lib "xwindow.pro" nil "markwardt") "%s, event" (nil))
   ("XWINDOW_CONFIGURATION" fun nil (lib "xwindow.pro" nil "markwardt") "Result = %s(filetype, config)" (nil ("Cancel") ("Create") ("PARENT") ("TITLE") ("XOFFSET") ("YOFFSET")))
   ("XWindow_WhatTypeVariable" fun nil (lib "xwindow.pro" nil "markwardt") "Result = %s(variable)" (nil))
   ("XWINDOW_QUIT" pro nil (lib "xwindow.pro" nil "markwardt") "%s, event" (nil))
   ("XWINDOW_CLEANUP" pro nil (lib "xwindow.pro" nil "markwardt") "%s, id" (nil))
   ("XWINDOW_CONFIGURE_FILES" pro nil (lib "xwindow.pro" nil "markwardt") "%s, event" (nil))
   ("XWINDOW_CREATE_FILES" pro nil (lib "xwindow.pro" nil "markwardt") "%s, event" (nil))
   ("XWINDOW_COLORS" pro nil (lib "xwindow.pro" nil "markwardt") "%s, event" (nil))
   ("XWINDOW_DRAW_EVENT" pro nil (lib "xwindow.pro" nil "markwardt") "%s, event" (nil))
   ("XWINDOW_RESIZE_EVENTS" pro nil (lib "xwindow.pro" nil "markwardt") "%s, event" (nil))
   ("XWINDOW" pro nil (lib "xwindow.pro" nil "markwardt") "%s, proName, param1, param2, param3, param4, param5, param6, param7, param8, param9, param10" (nil ("_EXTRA") ("CPMENU") ("DRAWID") ("ERASE") ("GROUP_LEADER") ("JUST_REGISTER") ("NO_CHANGE_CONFIG") ("NOMENU") ("OUTPUT") ("PROTECT") ("TOP") ("WID") ("WTITLE") ("WXPOS") ("WXSIZE") ("WYPOS") ("WYSIZE") ("XCOLORS")))
   ("FXGCLOSE" pro nil (lib "fxgclose.pro" nil "markwardt") "%s, UNIT" (nil))
   ("fxgfiltered" fun nil (lib "fxgfiltered.pro" nil "markwardt") "Result = %s(unit)" (nil))
   ("fxgopen_curl" pro nil (lib "fxgopen.pro" nil "markwardt") "%s, unit, resource, suffix" (nil ("_EXTRA") ("errmsg") ("error")))
   ("FXGOPEN" pro nil (lib "fxgopen.pro" nil "markwardt") "%s, UNIT, RESOURCE" (nil ("_EXTRA") ("ACCESS") ("errmsg") ("ERROR") ("SUFFIX")))
   ("FXGREAD" pro nil (lib "fxgread.pro" nil "markwardt") "%s, UNIT, BUFFER" (nil ("STATUS") ("TRANSFER_COUNT")))
   ("FXGSEEK" pro nil (lib "fxgseek.pro" nil "markwardt") "%s, UNIT, POSITION" (nil))
   ("FXGWRITE" pro nil (lib "fxgwrite.pro" nil "markwardt") "%s, UNIT, BUFFER" (nil ("TRANSFER_COUNT")))
   ("fxmakemap" pro nil (lib "fxmakemap.pro" nil "markwardt") "%s, suffix, command" (nil ("buffer_gran") ("buffer_max") ("get") ("info") ("rm_command") ("scratch_dir")))
   ("FXPBUFFR" pro nil (lib "fxpbuffr.pro" nil "markwardt") "%s, UNIT, NEWLEN" (nil))
   ("FXPCLOSE" pro nil (lib "fxpclose.pro" nil "markwardt") "%s, UNIT" (nil))
   ("FXPOPENR_WRAP_CMD" pro nil (lib "fxpopenr.pro" nil "markwardt") "%s, CMD, SHELL" (nil))
   ("FXPOPENR_TMPNAME" fun nil (lib "fxpopenr.pro" nil "markwardt") "Result = %s(CMD)" (nil))
   ("FXPOPENR" pro nil (lib "fxpopenr.pro" nil "markwardt") "%s, UNIT, CMD" (nil ("COMPRESS") ("ERRMSG") ("ERROR")))
   ("FXPREAD" pro nil (lib "fxpread.pro" nil "markwardt") "%s, UNIT, BUFFER" (nil ("TRANSFER_COUNT")))
   ("FXPSEEK" pro nil (lib "fxpseek.pro" nil "markwardt") "%s, UNIT, POSITION" (nil))
   ("transread" pro nil (lib "transread.pro" nil "markwardt") "%s, unit, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10, l11, l12, l13, l14, l15, l16, l17, l18, l19, l20" (nil ("comment") ("count") ("debug") ("failcount") ("filename") ("format") ("lines") ("maxlines") ("nocatch") ("noclose") ("skiplines") ("startcue") ("stopcue")))
   ("statusline" pro nil (lib "statusline.pro" nil "markwardt") "%s, str, col" (nil ("clear") ("close") ("disable") ("enable") ("left") ("length") ("nocr") ("quiet") ("right")))
   ("cmapply_product" fun nil (lib "cmapply.pro" nil "markwardt") "Result = %s(x)" (nil))
   ("cmapply_redim" pro nil (lib "cmapply.pro" nil "markwardt") "%s, newarr, dimapply, dimkeep, nkeep, totcol, totkeep" (nil))
   ("cmapply" fun nil (lib "cmapply.pro" nil "markwardt") "Result = %s(op, array, dimapply)" (nil ("double") ("functargs") ("nocatch") ("type")))
   ("cmrebin" fun nil (lib "cmrebin.pro" nil "markwardt") "Result = %s(array, D1, D2, D3, D4)" (nil ("dimension") ("total")))
   ("CMCONGRID" fun nil (lib "cmcongrid.pro" nil "markwardt") "Result = %s(arr, x, y, z)" (nil ("Cubic") ("Half_Half") ("Interp") ("Minus_One")))
   ("oplotimage" pro nil (lib "oplotimage.pro" nil "markwardt") "%s, img" (nil ("_EXTRA") ("imgxrange") ("imgyrange")))
   ("arg_present" fun nil (lib "arg_present.pro" nil "markwardt") "Result = %s(arg)" (nil ("nocatch")))
   ("plotimage_resamp" fun nil (lib "plotimage.pro" nil "markwardt") "Result = %s(image, nx, ny, bdepth, newx, newy)" (nil ("interp")))
   ("plotimage_pos" pro nil (lib "plotimage.pro" nil "markwardt") "%s, xrange0, imgxrange0, imgxsize, xreverse, srcxpix, imgxpanel" (nil ("logscale") ("pixtolerance") ("quiet") ("status")))
   ("plotimage" pro nil (lib "plotimage.pro" nil "markwardt") "%s, img0" (nil ("_EXTRA") ("bottom") ("dither") ("imgxrange") ("imgyrange") ("interp") ("min_dpi") ("ncolors") ("noaxes") ("nodata") ("noerase") ("order") ("panel") ("pixel_aspect_ratio") ("pixtolerance") ("position") ("preserve_aspect") ("quiet") ("range") ("subpanel") ("title") ("xlog") ("xrange") ("xstyle") ("ylog") ("yrange") ("ystyle")))
   ("plotbin" pro nil (lib "plotbin.pro" nil "markwardt") "%s, x0, y0" (nil ("_EXTRA") ("edge") ("midpoint") ("panel") ("pixcenter") ("plotvert") ("subpanel") ("width")))
   ("oplotbin" pro nil (lib "oplotbin.pro" nil "markwardt") "%s, x0, y0" (nil ("_EXTRA") ("edge") ("logclip") ("midpoint") ("pixcenter") ("plotvert") ("width")))
   ("defsubcell" fun nil (lib "defsubcell.pro" nil "markwardt") "Result = %s(default)" (nil))
   ("subcell" fun nil (lib "subcell.pro" nil "markwardt") "Result = %s(subpos, position)" (nil ("margin")))
   ("subcellarray" pro nil (lib "subcellarray.pro" nil "markwardt") "%s, xdivs, ydivs, newpanels, newsubpanels" (nil ("panel") ("subpanel") ("xreverse") ("yreverse")))
   ("plotpan" pro nil (lib "plotpan.pro" nil "markwardt") "%s, x, y" (nil ("_EXTRA") ("panel") ("subpanel")))
   ("arrdelete" fun nil (lib "arrdelete.pro" nil "markwardt") "Result = %s(init)" (nil ("at") ("count") ("empty1") ("length") ("overwrite")))
   ("arrinsert" fun nil (lib "arrinsert.pro" nil "markwardt") "Result = %s(init, insert)" (nil ("at") ("count") ("empty1") ("empty2") ("overwrite")))
   ("tagsize" fun nil (lib "tagsize.pro" nil "markwardt") "Result = %s(structure)" (nil ("length") ("n_tags") ("nocatch") ("status") ("structure_name") ("tag_names")))
   ("legcheb" fun nil (lib "legcheb.pro" nil "markwardt") "Result = %s(a)" (nil ("reset")))
   ("dxbreak" pro nil (lib "dxbreak.pro" nil "markwardt") "%s, arg0, arg1" (nil ("_EXTRA") ("is_function") ("nocatch") ("once")))
   ("hprnutang_init_iau1980" pro nil (lib "hprnutang.pro" nil "markwardt") "%s, argfacts, psiamps, epsamps" (nil))
   ("hprnutang_init_iau1980_args" pro nil (lib "hprnutang.pro" nil "markwardt") "%s, args" (nil))
   ("hprnutang_init_iau1996_args" pro nil (lib "hprnutang.pro" nil "markwardt") "%s, args" (nil))
   ("hprnutang" pro nil (lib "hprnutang.pro" nil "markwardt") "%s, jdtt, zeta, theta, z, dpsi, deps" (nil ("eq_equinox") ("fixed_base") ("fixed_epoch") ("gas_time") ("gms_time") ("jd_ut1") ("jpl") ("mean_obliquity") ("no_nutation") ("no_ut1") ("polar_x") ("polar_y") ("tbase") ("true_obliquity") ("use_eopdata")))
   ("chebcoef_eval" fun nil (lib "chebcoef.pro" nil "markwardt") "Result = %s(x, p)" (nil ("_EXTRA") ("expression")))
   ("chebcoef" fun nil (lib "chebcoef.pro" nil "markwardt") "Result = %s(f0, priv)" (nil ("double") ("error") ("expression") ("functargs") ("indices") ("interval") ("nmax") ("precision") ("reduce_algorithm") ("status")))
   ("xatt_el_encode_float" fun nil (lib "xatt_el.pro" nil "markwardt") "Result = %s(strs)" (nil))
   ("xatt_el_decode_float" fun nil (lib "xatt_el.pro" nil "markwardt") "Result = %s(strs)" (nil))
   ("xatt_el_parse" pro nil (lib "xatt_el.pro" nil "markwardt") "%s" (nil ("decode_file") ("encode_file")))
   ("xatt_el_value_locate" fun nil (lib "xatt_el.pro" nil "markwardt") "Result = %s(xbins, x)" (nil))
   ("xatt_el_tabinv" pro nil (lib "xatt_el.pro" nil "markwardt") "%s, XARR, X, IEFF" (nil))
   ("xatt_el_linterp" pro nil (lib "xatt_el.pro" nil "markwardt") "%s, Xtab, Ytab, Xint, Yint" (nil))
   ("xatt_el" fun nil (lib "xatt_el.pro" nil "markwardt") "Result = %s(ellist, e)" (nil ("attentype") ("by") ("coherent_scattering") ("incoherent_scattering") ("no_coherent") ("pair_electron") ("pair_nuclear") ("photoelectric") ("total") ("weights")))
   ("chebeval" fun nil (lib "chebeval.pro" nil "markwardt") "Result = %s(x0, p)" (nil ("derivative") ("interval")))
   ("ps_form_Draw_Coords" pro nil (lib "ps_form.pro" nil "markwardt") "%s, drawpixperunit, xoff, yoff, xsize, ysize" (nil))
   ("ps_form_Real_Coords" pro nil (lib "ps_form.pro" nil "markwardt") "%s, drawpixperunit, xoff, yoff, xsize, ysize" (nil))
   ("ps_form_Select_File" pro nil (lib "ps_form.pro" nil "markwardt") "%s, event" (nil))
   ("ps_form_PlotBox_Coords" fun nil (lib "ps_form.pro" nil "markwardt") "Result = %s(xsize, ysize, xoff, yoff, drawpixperunit)" (nil))
   ("ps_form_conv_pscoord" pro nil (lib "ps_form.pro" nil "markwardt") "%s, info, xpagesize, ypagesize" (nil ("tohuman") ("toidl")))
   ("ps_form_papernames" fun nil (lib "ps_form.pro" nil "markwardt") "Result = %s" (nil))
   ("ps_form_select_papersize" pro nil (lib "ps_form.pro" nil "markwardt") "%s, papertype, xpagesize, ypagesize" (nil ("inches") ("index") ("landscape")))
   ("ps_form_load_configs" pro nil (lib "ps_form.pro" nil "markwardt") "%s, defaultpaper, configs" (nil))
   ("ps_form_Update_Info" pro nil (lib "ps_form.pro" nil "markwardt") "%s, info" (nil ("_EXTRA") ("set")))
   ("ps_form_draw_box" pro nil (lib "ps_form.pro" nil "markwardt") "%s, xsize, ysize, xoff, yoff, info" (nil))
   ("ps_form_draw_form" pro nil (lib "ps_form.pro" nil "markwardt") "%s, info" (nil ("nobox")))
   ("ps_form_Null_Events" pro nil (lib "ps_form.pro" nil "markwardt") "%s, event" (nil))
   ("ps_form_What_Button_Type" fun nil (lib "ps_form.pro" nil "markwardt") "Result = %s(event)" (nil))
   ("ps_form_What_Button_Pressed" fun nil (lib "ps_form.pro" nil "markwardt") "Result = %s(event)" (nil))
   ("ps_form_What_Button_Released" fun nil (lib "ps_form.pro" nil "markwardt") "Result = %s(event)" (nil))
   ("ps_form_NumEvents" pro nil (lib "ps_form.pro" nil "markwardt") "%s, event" (nil))
   ("ps_form_Move_Box" pro nil (lib "ps_form.pro" nil "markwardt") "%s, event" (nil))
   ("ps_form_Grow_Box" pro nil (lib "ps_form.pro" nil "markwardt") "%s, event" (nil))
   ("ps_form_Box_Events" pro nil (lib "ps_form.pro" nil "markwardt") "%s, event" (nil))
   ("ps_form_predef_events" pro nil (lib "ps_form.pro" nil "markwardt") "%s, event" (nil))
   ("ps_form_Event" pro nil (lib "ps_form.pro" nil "markwardt") "%s, event" (nil))
   ("ps_form" fun nil (lib "ps_form.pro" nil "markwardt") "Result = %s(xoffset, yoffset)" (nil ("aspect") ("Bits_Per_Pixel") ("button_names") ("button_sel") ("Cancel") ("Color") ("Create") ("DefaultPaper") ("Defaults") ("Encapsulated") ("Filename") ("Help") ("Inches") ("Initialize") ("Landscape") ("LocalDefaults") ("NoCommon") ("pagebox") ("PaperSize") ("parent") ("PreDefined") ("preserve_aspect") ("select") ("XOffset") ("xpagesize") ("XSize") ("YOffset") ("ypagesize") ("YSize")))
   ("chebfit_eval" fun nil (lib "chebfit.pro" nil "markwardt") "Result = %s(p)" (nil ("_EXTRA") ("igood") ("interval") ("nterms")))
   ("chebfit" fun nil (lib "chebfit.pro" nil "markwardt") "Result = %s(x, y, err)" (nil ("bestnorm") ("dof") ("even") ("indices") ("initialize") ("interval") ("nmax") ("nocatch") ("odd") ("perror") ("precision") ("quiet") ("reduce_algorithm") ("yfit")))
   ("gauss1p" pro nil (lib "gauss1p.pro" nil "markwardt") "%s, x, p, f" (nil ("_EXTRA") ("skew")))
   ("gauss2" fun nil (lib "gauss2.pro" nil "markwardt") "Result = %s(x, y, p)" (nil ("_EXTRA")))
   ("geograv_unitize" fun nil (lib "geograv.pro" nil "markwardt") "Result = %s(u)" (nil))
   ("geograv_one" pro nil (lib "geograv.pro" nil "markwardt") "%s, geogmod, r, phi, a" (nil ("C") ("mmax") ("nmax") ("S") ("unitfact")))
   ("geograv" pro nil (lib "geograv.pro" nil "markwardt") "%s, geogmod, r, phi, a" (nil ("mmax") ("nmax") ("units")))
   ("chebpcmat" pro nil (lib "chebgrid.pro" nil "markwardt") "%s, npts, npoly, xmat, vmat" (nil ("dweight")))
   ("chebpcmat_xonly" pro nil (lib "chebgrid.pro" nil "markwardt") "%s, npts, npoly, xmat" (nil))
   ("chebgrid" fun nil (lib "chebgrid.pro" nil "markwardt") "Result = %s(t, x, dxdt)" (nil ("deriv_weight") ("dresiduals") ("drms") ("dxmatrix") ("ngranule") ("npoints") ("npolynomial") ("reset") ("residuals") ("rms") ("xmatrix")))
   ("CMPRODUCT" fun nil (lib "cmproduct.pro" nil "markwardt") "Result = %s(ARRAY)" (nil))
   ("cmsvlib" fun nil (lib "cmsvlib.pro" nil "markwardt") "Result = %s" (nil ("query") ("version")))
   ("cmarg_present" fun nil (lib "cmarg_present.pro" nil "markwardt") "Result = %s(arg)" (nil ("nocatch")))
   ("cmreplicate" fun nil (lib "cmreplicate.pro" nil "markwardt") "Result = %s(array, dims)" (nil))
   ("arg_present" fun nil (lib "cmrestore.pro" nil "markwardt") "Result = %s(x)" (nil))
   ("cmrestore" pro nil (lib "cmrestore.pro" nil "markwardt") "%s, filename0, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23, p24, p25, p26, p27, p28, p29" (nil ("all") ("data") ("errmsg") ("filename") ("mtimes") ("names") ("nocatch") ("pass_method") ("quiet") ("relaxed_structure_assignment") ("restored_objects") ("status") ("varstatus") ("verbose")))
   ("cmsvread" pro nil (lib "cmsvread.pro" nil "markwardt") "%s, unit0, data" (nil ("errmsg") ("name") ("no_data") ("promote64") ("quiet") ("size") ("status") ("structure_name") ("timestamp") ("version")))
   ("cmsvwrite" pro nil (lib "cmsvwrite.pro" nil "markwardt") "%s, unit0, data" (nil ("compat") ("errmsg") ("name") ("no_end") ("quiet") ("status")))
   ("hprstatn" pro nil (lib "hprstatn.pro" nil "markwardt") "%s, jdtt, r_iers, r_eci, v_eci" (nil ("jpl") ("no_nutation") ("no_polar_motion") ("no_precession") ("no_ut1") ("tbase") ("use_eop")))
   ("cmsave_handle_value" fun nil (lib "cmsave.pro" nil "markwardt") "Result = %s(handle)" (nil ("no_copy")))
   ("cmsave" pro nil (lib "cmsave.pro" nil "markwardt") "%s, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23, p24, p25, p26, p27, p28, p29" (nil ("all") ("append") ("compatible") ("data") ("errmsg") ("filename") ("mtimes") ("names") ("nocatch") ("pass_method") ("quiet") ("status") ("useunit") ("varstatus") ("verbose") ("xdr")))
   ("cmsavedir" pro nil (lib "cmsavedir.pro" nil "markwardt") "%s, filename" (nil ("errmsg") ("force") ("func_names") ("n_function") ("n_pro") ("n_variables") ("named_classes") ("named_structs") ("notice") ("pro_names") ("quiet") ("raw") ("read_heap") ("status") ("timestamp") ("types") ("var_names") ("verbose") ("version")))
   ("cmset_op_uniq" fun nil (lib "cmset_op.pro" nil "markwardt") "Result = %s(a)" (nil))
   ("cmset_op" fun nil (lib "cmset_op.pro" nil "markwardt") "Result = %s(a, op0, b)" (nil ("count") ("empty1") ("empty2") ("index") ("maxarray") ("not1") ("not2")))
   ("cmsv_open" pro nil (lib "cmsv_open.pro" nil "markwardt") "%s, unit, filename, offset" (nil ("access") ("compatibility") ("compressed") ("errmsg") ("force") ("get_lun") ("query") ("reopen") ("status")))
   ("cmsv_ptrsum" pro nil (lib "cmsv_ptrsum.pro" nil "markwardt") "%s, data, result" (nil ("has_objects") ("null")))
   ("cmsv_rconv" pro nil (lib "cmsv_rdata.pro" nil "markwardt") "%s, data" (nil))
   ("cmsv_rhdata" pro nil (lib "cmsv_rdata.pro" nil "markwardt") "%s, block, pointer, data, index, offsets, pdata" (nil ("errmsg") ("offset") ("status") ("unit")))
   ("cmsv_rdata" pro nil (lib "cmsv_rdata.pro" nil "markwardt") "%s, block, pointer, sz, data" (nil ("bcstring40") ("bytelong") ("errmsg") ("offset") ("ptr_callback") ("ptr_data") ("ptr_index") ("ptr_offsets") ("start") ("status") ("template") ("temporary") ("unit")))
   ("cmsv_rbuf" pro nil (lib "cmsv_rraw.pro" nil "markwardt") "%s, block, pointer, nbytes" (nil ("errmsg") ("status") ("unit")))
   ("cmsv_rraw" fun nil (lib "cmsv_rraw.pro" nil "markwardt") "Result = %s(block, pointer, nelt0)" (nil ("buffer") ("byte") ("errmsg") ("long") ("offset") ("status") ("string") ("type") ("unit")))
   ("cmsystime_xmod" fun nil (lib "cmsystime.pro" nil "markwardt") "Result = %s(x, m)" (nil))
   ("cmsystime_mjd2ymd" pro nil (lib "cmsystime.pro" nil "markwardt") "%s, mjd, yr, mo, da" (nil))
   ("cmsystime" fun nil (lib "cmsystime.pro" nil "markwardt") "Result = %s(arg0)" (nil ("extended") ("from_julian") ("from_local") ("from_mjd") ("julian") ("local") ("mjd") ("now") ("seconds") ("timezone")))
   ("helpform" fun nil (lib "helpform.pro" nil "markwardt") "Result = %s(name0, value)" (nil ("full_struct") ("recursive_struct") ("shortform") ("single") ("size") ("structure_name") ("tagform") ("width")))
   ("inputform_int" fun nil (lib "inputform.pro" nil "markwardt") "Result = %s(x, format)" (nil))
   ("inputform_float" fun nil (lib "inputform.pro" nil "markwardt") "Result = %s(x, format)" (nil ("dconvert")))
   ("inputform_string" fun nil (lib "inputform.pro" nil "markwardt") "Result = %s(x)" (nil))
   ("inputform_struct" fun nil (lib "inputform.pro" nil "markwardt") "Result = %s(data)" (nil ("errmsg") ("status")))
   ("inputform_ptr" fun nil (lib "inputform.pro" nil "markwardt") "Result = %s(x, tp)" (nil))
   ("inputform_basic" fun nil (lib "inputform.pro" nil "markwardt") "Result = %s(x)" (nil ("errmsg") ("si") ("status")))
   ("inputform" fun nil (lib "inputform.pro" nil "markwardt") "Result = %s(data)" (nil ("errmsg") ("max_dimensions") ("max_elements") ("max_len") ("max_tags") ("nocatch") ("status")))
   ("printlog" pro nil (lib "printlog.pro" nil "markwardt") "%s, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18, d19, d20" (nil ("default_print") ("format") ("log") ("nloglines") ("nocatch") ("onlylog") ("trim") ("unit")))
   ("dxclear" pro nil (lib "dxclear.pro" nil "markwardt") "%s, index0" (nil))
   ("dxdown" pro nil (lib "dxdown.pro" nil "markwardt") "%s, nlevels0" (nil))
   ("dxfinish" pro nil (lib "dxfinish.pro" nil "markwardt") "%s, nlevels0" (nil ("once")))
   ("dxget" fun nil (lib "dxget.pro" nil "markwardt") "Result = %s(vname)" (nil ("level") ("status")))
   ("dxhelpform" fun nil (lib "dxhelp.pro" nil "markwardt") "Result = %s(name0, value)" (nil ("_EXTRA") ("shortform") ("single") ("structure") ("tagform") ("width")))
   ("dxhelp" pro nil (lib "dxhelp.pro" nil "markwardt") "%s, x0, x1, x2, x3, x4, x5, x6, x7, x8, x9" (nil ("_EXTRA") ("all") ("level")))
   ("dxlreset" pro nil (lib "dxlreset.pro" nil "markwardt") "%s" (nil ("remove")))
   ("dxplevel" pro nil (lib "dxplevel.pro" nil "markwardt") "%s" (nil ("current") ("level")))
   ("dxprint" pro nil (lib "dxprint.pro" nil "markwardt") "%s, x0, x1, x2, x3, x4, x5, x6, x7, x8, x9" (nil ("format") ("level")))
   ("dxptrace" fun nil (lib "dxptrace.pro" nil "markwardt") "Result = %s(str)" (nil ("status")))
   ("dxset" pro nil (lib "dxset.pro" nil "markwardt") "%s, vname, value" (nil ("level")))
   ("dxup" pro nil (lib "dxup.pro" nil "markwardt") "%s, nlevels0" (nil))
   ("mpfit2dpeak_u" fun nil (lib "mpfit2dpeak.pro" nil "markwardt") "Result = %s(x, y, p)" (nil ("symmetric") ("tilt")))
   ("mpfit2dpeak_gauss" fun nil (lib "mpfit2dpeak.pro" nil "markwardt") "Result = %s(x, y, p)" (nil ("_extra") ("symmetric") ("tilt")))
   ("mpfit2dpeak_lorentz" fun nil (lib "mpfit2dpeak.pro" nil "markwardt") "Result = %s(x, y, p)" (nil ("_extra") ("symmetric") ("tilt")))
   ("mpfit2dpeak_moffat" fun nil (lib "mpfit2dpeak.pro" nil "markwardt") "Result = %s(x, y, p)" (nil ("_extra") ("symmetric") ("tilt")))
   ("mpfit2dpeak" fun nil (lib "mpfit2dpeak.pro" nil "markwardt") "Result = %s(z, a, x, y)" (nil ("_extra") ("bestnorm") ("chisq") ("circle") ("circular") ("dof") ("errmsg") ("error") ("estimates") ("gaussian") ("lorentzian") ("measure_errors") ("moffat") ("negative") ("nfev") ("nfree") ("niter") ("parinfo") ("perror") ("query") ("quiet") ("sigma") ("status") ("symmetric") ("tilt") ("weights") ("zerror")))
   ("mpfitpeak_u" fun nil (lib "mpfitpeak.pro" nil "markwardt") "Result = %s(x, p)" (nil))
   ("mpfitpeak_gauss" fun nil (lib "mpfitpeak.pro" nil "markwardt") "Result = %s(x, p)" (nil ("_extra")))
   ("mpfitpeak_lorentz" fun nil (lib "mpfitpeak.pro" nil "markwardt") "Result = %s(x, p)" (nil ("_extra")))
   ("mpfitpeak_moffat" fun nil (lib "mpfitpeak.pro" nil "markwardt") "Result = %s(x, p)" (nil ("_extra")))
   ("mpfitpeak" fun nil (lib "mpfitpeak.pro" nil "markwardt") "Result = %s(x, y, a)" (nil ("_extra") ("bestnorm") ("chisq") ("dof") ("errmsg") ("error") ("estimates") ("gaussian") ("lorentzian") ("measure_errors") ("moffat") ("negative") ("nfev") ("nfree") ("niter") ("nterms") ("parinfo") ("perror") ("positive") ("query") ("quiet") ("sigma") ("status") ("weights") ("yerror")))
   ("SetFitParm_Events" pro nil (lib "setfitparm.pro" nil "markwardt") "%s, event" (nil))
   ("SetFitParm" fun nil (lib "setfitparm.pro" nil "markwardt") "Result = %s(thisFParm)" (nil ("Cancel") ("Parent")))
   ("CONV_UNIX_VAX" pro nil (lib "conv_unix_vax.pro" nil "markwardt") "%s, variable" (nil ("SOURCE_ARCH")))
   ("ieee_to_host" pro nil (lib "ieee_to_host.pro" nil "markwardt") "%s, data" (nil ("IDLTYPE")))
   ("WHERE_NEGZERO" fun nil (lib "where_negzero.pro" nil "markwardt") "Result = %s(ARRAY, COUNT)" (nil ("QUIET")))
   ("cmsv_rcomm" pro nil (lib "cmsv_rrec.pro" nil "markwardt") "%s, block, pointer, names" (nil ("errmsg") ("offset") ("status") ("unit")))
   ("cmsv_rheap" pro nil (lib "cmsv_rrec.pro" nil "markwardt") "%s, block, pointer, index" (nil ("errmsg") ("offset") ("status") ("unit")))
   ("cmsv_rstamp" pro nil (lib "cmsv_rrec.pro" nil "markwardt") "%s, block, pointer, tstamp" (nil ("errmsg") ("offset") ("status") ("unit")))
   ("cmsv_rversion" pro nil (lib "cmsv_rrec.pro" nil "markwardt") "%s, block, pointer, vers" (nil ("errmsg") ("offset") ("status") ("unit")))
   ("cmsv_rident" pro nil (lib "cmsv_rrec.pro" nil "markwardt") "%s, block, pointer, ident" (nil ("errmsg") ("offset") ("status") ("unit")))
   ("cmsv_rnotice" pro nil (lib "cmsv_rrec.pro" nil "markwardt") "%s, block, pointer, notice" (nil ("errmsg") ("offset") ("status") ("unit")))
   ("cmsv_rrec" pro nil (lib "cmsv_rrec.pro" nil "markwardt") "%s, block, pointer, data" (nil ("autopromote64") ("block_name") ("block_type") ("compressed") ("errmsg") ("full") ("initialize") ("next_block") ("offset") ("promote64") ("qblocknames") ("status") ("unit")))
   ("cephes_setmachar" pro nil (lib "mpftest.pro" nil "markwardt") "%s" (nil))
   ("cephes_incbet" fun nil (lib "mpftest.pro" nil "markwardt") "Result = %s(aa, bb, xx)" (nil))
   ("cephes_incbcf" fun nil (lib "mpftest.pro" nil "markwardt") "Result = %s(a, b, x)" (nil))
   ("cephes_incbd" fun nil (lib "mpftest.pro" nil "markwardt") "Result = %s(a, b, x)" (nil))
   ("cephes_pseries" fun nil (lib "mpftest.pro" nil "markwardt") "Result = %s(a, b, x)" (nil))
   ("mpftest" fun nil (lib "mpftest.pro" nil "markwardt") "Result = %s(x, nu1, nu2)" (nil ("clevel") ("sigma") ("slevel")))
   ("srvadd" fun nil (lib "srvadd.pro" nil "markwardt") "Result = %s(u, v)" (nil ("classical")))
   ("plotcolorfill" pro nil (lib "plotcolorfill.pro" nil "markwardt") "%s, x0, y0" (nil ("_EXTRA") ("bottom") ("color") ("edge") ("midpoint") ("noerase") ("notrace") ("panel") ("position") ("subpanel") ("thick") ("transparent") ("width") ("xlog") ("xstyle") ("ylog") ("ystyle")))
   ("cmsv_rarrdesc" pro nil (lib "cmsv_rvtype.pro" nil "markwardt") "%s, block, pointer, sz" (nil ("errmsg") ("status") ("unit")))
   ("cmsv_rstructdesc" pro nil (lib "cmsv_rvtype.pro" nil "markwardt") "%s, block, pointer, template" (nil ("errmsg") ("named_classes") ("named_structs") ("no_create") ("status") ("structure_name") ("suffix") ("unit")))
   ("cmsv_rvtype" pro nil (lib "cmsv_rvtype.pro" nil "markwardt") "%s, block, pointer, result, sz" (nil ("errmsg") ("heap") ("named_classes") ("named_structs") ("no_create") ("no_type") ("offset") ("status") ("structure_name") ("suffix") ("system") ("template") ("unit")))
   ("plotcube" pro nil (lib "plotcube.pro" nil "markwardt") "%s, x, y, z" (nil ("_EXTRA") ("noerase") ("panel") ("subpanel") ("xrange") ("xtitle") ("yrange") ("ytitle") ("zrange") ("ztitle")))
   ("cmsv_test_set" pro nil (lib "cmsv_test.pro" nil "markwardt") "%s, a, b, c, d, e" (nil ("print") ("reset") ("set")))
   ("cmsv_test_undefine" pro nil (lib "cmsv_test.pro" nil "markwardt") "%s, x" (nil))
   ("cmsv_test_unset" pro nil (lib "cmsv_test.pro" nil "markwardt") "%s, a, b, c, d, e" (nil))
   ("cmsv_test_vcomp" pro nil (lib "cmsv_test.pro" nil "markwardt") "%s, x0, x, result, failed" (nil ("name")))
   ("cmsv_test_comp" pro nil (lib "cmsv_test.pro" nil "markwardt") "%s, a, b, c, d, e, result, failed" (nil))
   ("cmsv_test" pro nil (lib "cmsv_test.pro" nil "markwardt") "%s, filename0" (nil ("user_value")))
   ("qrfac" pro nil (lib "qrfac.pro" nil "markwardt") "%s, a, r, ipvt, acnorm" (nil ("pivot") ("qmatrix")))
   ("cmsv_wconv" pro nil (lib "cmsv_wdata.pro" nil "markwardt") "%s, data" (nil))
   ("cmsv_wdata" pro nil (lib "cmsv_wdata.pro" nil "markwardt") "%s, block, pointer, value" (nil ("errmsg") ("ptr_data") ("ptr_index") ("start") ("status") ("temporary") ("unit")))
   ("cmsv_enlarge" pro nil (lib "cmsv_wraw.pro" nil "markwardt") "%s, block, pointer, nbytes" (nil ("errmsg") ("status")))
   ("cmsv_wraw" pro nil (lib "cmsv_wraw.pro" nil "markwardt") "%s, block, pointer, value0" (nil ("byte") ("errmsg") ("long") ("replen") ("status") ("string") ("unit")))
   ("cmsv_wcomm" pro nil (lib "cmsv_wrec.pro" nil "markwardt") "%s, block, pointer, names" (nil ("errmsg") ("status")))
   ("cmsv_wheap" pro nil (lib "cmsv_wrec.pro" nil "markwardt") "%s, block, pointer, indices" (nil ("errmsg") ("status")))
   ("cmsv_wstamp" pro nil (lib "cmsv_wrec.pro" nil "markwardt") "%s, block, pointer" (nil ("_extra") ("errmsg") ("offset") ("save_date") ("save_host") ("save_user") ("status")))
   ("cmsv_wversion" pro nil (lib "cmsv_wrec.pro" nil "markwardt") "%s, block, pointer" (nil ("_extra") ("arch") ("compatible") ("errmsg") ("format_version") ("os") ("release") ("status")))
   ("cmsv_wident" pro nil (lib "cmsv_wrec.pro" nil "markwardt") "%s, block, pointer" (nil ("_EXTRA") ("author") ("errmsg") ("idcode") ("status") ("title")))
   ("cmsv_wnotice" pro nil (lib "cmsv_wrec.pro" nil "markwardt") "%s, block, pointer" (nil ("_EXTRA") ("errmsg") ("status") ("text")))
   ("cmsv_wrec" pro nil (lib "cmsv_wrec.pro" nil "markwardt") "%s, block, pointer, data, name" (nil ("_EXTRA") ("block_name") ("block_type") ("compatibility") ("errmsg") ("finish") ("initialize") ("next_block") ("no_data") ("no_type") ("offset") ("status") ("unit")))
   ("cmsv_warrdesc" pro nil (lib "cmsv_wvtype.pro" nil "markwardt") "%s, block, pointer, sz" (nil ("errmsg") ("length") ("status")))
   ("cmsv_wstructdesc" pro nil (lib "cmsv_wvtype.pro" nil "markwardt") "%s, block, pointer" (nil ("errmsg") ("nocatch") ("status") ("template")))
   ("cmsv_wvtype" pro nil (lib "cmsv_wvtype.pro" nil "markwardt") "%s, block, pointer, data, ident" (nil ("errmsg") ("heap") ("offset") ("status") ("system") ("unit")))
   ("cmunique_id" fun nil (lib "cmunique_id.pro" nil "markwardt") "Result = %s(fodder)" (nil))
   ("jbepoch" fun nil (lib "jbepoch.pro" nil "markwardt") "Result = %s(ep)" (nil ("b") ("j") ("mjd") ("to_day")))
   ("crosspn" fun nil (lib "crosspn.pro" nil "markwardt") "Result = %s(x1, x2)" (nil))
   ("ddeabm_dummy" pro nil (lib "ddeabm.pro" nil "markwardt") "%s" (nil))
   ("ddeabm_func0n" fun nil (lib "ddeabm.pro" nil "markwardt") "Result = %s(func, a, y, private)" (nil ("_extra")))
   ("ddeabm_func1n" fun nil (lib "ddeabm.pro" nil "markwardt") "Result = %s(func, a, y, private)" (nil ("_extra")))
   ("ddeabm_func0e" fun nil (lib "ddeabm.pro" nil "markwardt") "Result = %s(func, a, y, private)" (nil ("_extra")))
   ("ddeabm_func1e" fun nil (lib "ddeabm.pro" nil "markwardt") "Result = %s(func, a, y, private)" (nil ("_extra")))
   ("ddeabm_dhstrt" pro nil (lib "ddeabm.pro" nil "markwardt") "%s, DF, NEQ, A, B, Y, YPRIME, ETOL, MORDER, SMALL, BIG, SPY, PV, YP, SF, PRIVATE, FA, H, DFNAME" (nil))
   ("ddeabm_ddes" pro nil (lib "ddeabm.pro" nil "markwardt") "%s, DF, NEQ, T, Y, TOUT, INFO, RTOL, ATOL, IDID, YPOUT, YP, YY, WT, P, PHI, ALPHA, BETA, PSI, V, W, SIG, G, GI, H, EPS, X, XOLD, HOLD, TOLD, DELSGN, TSTOP, TWOU, FOURU, START, PHASE1, NORND, STIFF, INTOUT, NS, KORD, KOLD, INIT, KSTEPS, KLE4, IQUIT, KPREV, IVC, IV, KGI, PRIVATE, FA, dfname" (nil ("errmsg") ("max_stepsize")))
   ("DDEABM_DINTP" pro nil (lib "ddeabm.pro" nil "markwardt") "%s, X, Y, XOUT, YOUT, YPOUT, NEQN, KOLD, PHI, IVC, IV, KGI, GI, ALPHA, OG, OW, OX, OY" (nil))
   ("DDEABM_DSTEPS" pro nil (lib "ddeabm.pro" nil "markwardt") "%s, DF, NEQN, Y, X, H, EPS, WT, START, HOLD, K, KOLD, CRASH, PHI, P, YP, PSI, ALPHA, BETA, SIG, V, W, G, PHASE1, NS, NORND, KSTEPS, TWOU, FOURU, XOLD, KPREV, IVC, IV, KGI, GI, PRIVATE, FA, dfname" (nil ("max_stepsize")))
   ("DDEABM" pro nil (lib "ddeabm.pro" nil "markwardt") "%s, DF, T, Y, TOUT0, PRIVATE" (nil ("CONTROL") ("dostatusline") ("epsabs") ("epsrel") ("errmsg") ("FUNCTARGS") ("init") ("intermediate") ("MAX_STEPSIZE") ("NFEV") ("NGRID") ("NOUTGRID") ("STATE") ("status") ("TGRID") ("TIMPULSE") ("tstop") ("YGRID") ("YIMPULSE") ("YPGRID")))
   ("eopdata_read" pro nil (lib "eopdata.pro" nil "markwardt") "%s, file, jd, pmx, pmy, ut1, dpsi, deps" (nil ("status")))
   ("eopdata" pro nil (lib "eopdata.pro" nil "markwardt") "%s, jdutc, pmx, pmy, ut1_utc, dpsi, deps" (nil ("angunits") ("filename") ("reset") ("tbase")))
   ("geogread" pro nil (lib "geogread.pro" nil "markwardt") "%s, rootfile, geogmod" (nil ("coeff_err") ("errmsg") ("status")))
   ("gti2mask" fun nil (lib "gti2mask.pro" nil "markwardt") "Result = %s(gti, time)" (nil ("bad") ("exposure") ("fill") ("good") ("invert") ("minfracexp") ("ntbins") ("overlap") ("query") ("timedel") ("timepixr") ("tlimits")))
   ("gtienlarge" fun nil (lib "gtienlarge.pro" nil "markwardt") "Result = %s(gti)" (nil ("count") ("post") ("pre") ("query")))
   ("gtimerge" fun nil (lib "gtimerge.pro" nil "markwardt") "Result = %s(gti1, gti2)" (nil ("count") ("intersect") ("invert1") ("invert2") ("query") ("quiet") ("ttolerance") ("union")))
   ("gtiread" fun nil (lib "gtiread.pro" nil "markwardt") "Result = %s(inlist, extension)" (nil ("count") ("intersect") ("mjdref") ("quiet") ("status") ("timezero") ("toffset") ("union")))
   ("gtiseg" fun nil (lib "gtiseg.pro" nil "markwardt") "Result = %s(time)" (nil ("count") ("indices") ("maxgap") ("mingti") ("query")))
   ("gtitrim" fun nil (lib "gtitrim.pro" nil "markwardt") "Result = %s(gti)" (nil ("count") ("maxgap") ("maxgti") ("mingti") ("query")))
   ("gtiwhere" fun nil (lib "gtiwhere.pro" nil "markwardt") "Result = %s(time, gti)" (nil ("count") ("include") ("INTERVALS") ("invert") ("query")))
   ("init" fun "hashtable" (lib "hashtable__define.pro" nil "markwardt") "Result = Obj ->[%s::]%s" (nil ("_EXTRA") ("length") ("no_duplicates") ("null_value")))
   ("hashent__define" pro nil (lib "hashtable__define.pro" nil "markwardt") "%s" (nil))
   ("cleanup" pro "hashtable" (lib "hashtable__define.pro" nil "markwardt") "Obj ->[%s::]%s" (nil))
   ("bucket" fun "hashtable" (lib "hashtable__define.pro" nil "markwardt") "Result = Obj ->[%s::]%s(hashval)" (nil))
   ("strhashval" fun "hashtable" (lib "hashtable__define.pro" nil "markwardt") "Result = Obj ->[%s::]%s(str)" (nil ("radix")))
   ("add" pro "hashtable" (lib "hashtable__define.pro" nil "markwardt") "Obj ->[%s::]%s, key, value" (nil ("errmsg") ("hashval") ("position") ("replace") ("status")))
   ("count" fun "hashtable" (lib "hashtable__define.pro" nil "markwardt") "Result = Obj ->[%s::]%s" (nil))
   ("remove" pro "hashtable" (lib "hashtable__define.pro" nil "markwardt") "Obj ->[%s::]%s, key" (nil ("all") ("count") ("hashval") ("position")))
   ("iscontained" fun "hashtable" (lib "hashtable__define.pro" nil "markwardt") "Result = Obj ->[%s::]%s(key)" (nil ("count") ("errmsg") ("hashval") ("position") ("value")))
   ("get" fun "hashtable" (lib "hashtable__define.pro" nil "markwardt") "Result = Obj ->[%s::]%s(key)" (nil ("count") ("hashval") ("position")))
   ("keys" fun "hashtable" (lib "hashtable__define.pro" nil "markwardt") "Result = Obj ->[%s::]%s" (nil ("_EXTRA") ("count")))
   ("struct" fun "hashtable" (lib "hashtable__define.pro" nil "markwardt") "Result = Obj ->[%s::]%s" (nil ("_EXTRA") ("count")))
   ("hashtable__define" pro nil (lib "hashtable__define.pro" nil "markwardt") "%s" (nil))
   ("srvdopp" fun nil (lib "srvdopp.pro" nil "markwardt") "Result = %s(u, v)" (nil ("classical")))
   ("jplephinterp_calc" pro nil (lib "jplephinterp.pro" nil "markwardt") "%s, info, raw, obj, t, x, y, z, vx, vy, vz" (nil ("tbase") ("velocity")))
   ("jplephinterp_denew" pro nil (lib "jplephinterp.pro" nil "markwardt") "%s, info, raw, obj, t, x, y, z, vx, vy, vz" (nil ("tbase") ("velocity")))
   ("jplephinterp" pro nil (lib "jplephinterp.pro" nil "markwardt") "%s, info, raw, t, x, y, z, vx, vy, vz" (nil ("center") ("decode_obj") ("earth") ("objectname") ("pos_vel_factor") ("posunits") ("sun") ("tbase") ("velocity") ("velunits") ("xobjnum")))
   ("jplephmake" pro nil (lib "jplephmake.pro" nil "markwardt") "%s, info, raw, obj, t, cx, cy, cz" (nil ("author") ("date") ("keyvalues") ("keywords") ("nsubintervals") ("posunits") ("reset")))
   ("jplephpar" fun nil (lib "jplephread.pro" nil "markwardt") "Result = %s(header, parname)" (nil ("default") ("fatal")))
   ("jplephval" fun nil (lib "jplephread.pro" nil "markwardt") "Result = %s(names, values, name)" (nil ("default") ("fatal")))
   ("jplephread" pro nil (lib "jplephread.pro" nil "markwardt") "%s, filename, info, raw, jdlimits" (nil ("errmsg") ("status")))
   ("jplephtest" pro nil (lib "jplephtest.pro" nil "markwardt") "%s, ephfile, testfile" (nil ("pause") ("threshold")))
   ("litmsol" pro nil (lib "litmsol.pro" nil "markwardt") "%s, t1, x1, y1, z1, t2, info2, raw2, obj2, info, raw" (nil ("error") ("interp_func") ("maxiter") ("niter") ("no_shapiro") ("posunits") ("receiver") ("shapiro_calc") ("shapiro_delay") ("shapiro_deriv") ("tbase") ("tguess") ("tolerance") ("velunits") ("vx1") ("vx2") ("vy1") ("vy2") ("vz1") ("vz2") ("x2") ("xoffset") ("y2") ("yoffset") ("z2") ("zoffset")))
   ("mask2gti" fun nil (lib "mask2gti.pro" nil "markwardt") "Result = %s(time, mask, count)" (nil ("bad") ("good") ("indices") ("post") ("pre") ("query") ("timedel") ("timepixr")))
   ("mcholdc" pro nil (lib "mcholdc.pro" nil "markwardt") "%s, a, d, e" (nil ("cholsol") ("invpermute") ("outfull") ("permute") ("pivot") ("sparse") ("tau")))
   ("cephes_setmachar" pro nil (lib "mpchilim.pro" nil "markwardt") "%s" (nil))
   ("cephes_polevl" fun nil (lib "mpchilim.pro" nil "markwardt") "Result = %s(x, coef)" (nil))
   ("cephes_ndtri" fun nil (lib "mpchilim.pro" nil "markwardt") "Result = %s(y0)" (nil))
   ("cephes_igam" fun nil (lib "mpchilim.pro" nil "markwardt") "Result = %s(a, x)" (nil))
   ("cephes_igamc" fun nil (lib "mpchilim.pro" nil "markwardt") "Result = %s(a, x)" (nil))
   ("cephes_igami" fun nil (lib "mpchilim.pro" nil "markwardt") "Result = %s(a, y0)" (nil))
   ("mpchilim" fun nil (lib "mpchilim.pro" nil "markwardt") "Result = %s(p, dof)" (nil ("clevel") ("sigma") ("slevel")))
   ("cephes_setmachar" pro nil (lib "mpchitest.pro" nil "markwardt") "%s" (nil))
   ("cephes_igam" fun nil (lib "mpchitest.pro" nil "markwardt") "Result = %s(a, x)" (nil))
   ("cephes_igamc" fun nil (lib "mpchitest.pro" nil "markwardt") "Result = %s(a, x)" (nil))
   ("mpchitest" fun nil (lib "mpchitest.pro" nil "markwardt") "Result = %s(x, dof)" (nil ("clevel") ("sigma") ("slevel")))
   ("mpfitellipse_u" fun nil (lib "mpfitellipse.pro" nil "markwardt") "Result = %s(x, y, p)" (nil ("circle") ("tilt")))
   ("mpfitellipse_eval" fun nil (lib "mpfitellipse.pro" nil "markwardt") "Result = %s(p)" (nil ("_EXTRA") ("circle") ("tilt")))
   ("mpfitellipse" fun nil (lib "mpfitellipse.pro" nil "markwardt") "Result = %s(x, y, p0)" (nil ("_EXTRA") ("BESTNORM") ("circle") ("circular") ("covar") ("ERRMSG") ("nfev") ("niter") ("parinfo") ("perror") ("query") ("quiet") ("STATUS") ("symmetric") ("tilt") ("WEIGHTS")))
   ("cephes_setmachar" pro nil (lib "mpnormlim.pro" nil "markwardt") "%s" (nil))
   ("cephes_polevl" fun nil (lib "mpnormlim.pro" nil "markwardt") "Result = %s(x, coef)" (nil))
   ("cephes_ndtri" fun nil (lib "mpnormlim.pro" nil "markwardt") "Result = %s(y0)" (nil))
   ("mpnormlim" fun nil (lib "mpnormlim.pro" nil "markwardt") "Result = %s(p)" (nil ("clevel") ("slevel")))
   ("cephes_setmachar" pro nil (lib "mpnormtest.pro" nil "markwardt") "%s" (nil))
   ("cephes_polevl" fun nil (lib "mpnormtest.pro" nil "markwardt") "Result = %s(x, coef)" (nil))
   ("cephes_set_erf_common" pro nil (lib "mpnormtest.pro" nil "markwardt") "%s" (nil))
   ("cephes_erfc" fun nil (lib "mpnormtest.pro" nil "markwardt") "Result = %s(a)" (nil))
   ("cephes_erf" fun nil (lib "mpnormtest.pro" nil "markwardt") "Result = %s(x)" (nil))
   ("mpnormtest" fun nil (lib "mpnormtest.pro" nil "markwardt") "Result = %s(a)" (nil ("clevel") ("slevel")))
   ("multisort_intkey" fun nil (lib "multisort.pro" nil "markwardt") "Result = %s(x, len)" (nil ("order") ("unsigned")))
   ("multisort_fltkey" fun nil (lib "multisort.pro" nil "markwardt") "Result = %s(x1, type)" (nil ("order")))
   ("multisort_strkey" fun nil (lib "multisort.pro" nil "markwardt") "Result = %s(x)" (nil ("order")))
   ("multisort" fun nil (lib "multisort.pro" nil "markwardt") "Result = %s(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9)" (nil ("keys") ("L64") ("no_builtin") ("order")))
   ("normpath" pro nil (lib "normpath.pro" nil "markwardt") "%s, from0, normalized" (nil ("current")))
   ("phunwrap" fun nil (lib "phunwrap.pro" nil "markwardt") "Result = %s(ph)" (nil ("maxval") ("tolerance")))
   ("profree" pro nil (lib "profree.pro" nil "markwardt") "%s, tree" (nil))
   ("prn_strcat" fun nil (lib "prorend.pro" nil "markwardt") "Result = %s(strings)" (nil ("joinstring")))
   ("prn_push" pro nil (lib "prorend.pro" nil "markwardt") "%s, stack, val" (nil ("nstack") ("template")))
   ("prn_opn" fun nil (lib "prorend.pro" nil "markwardt") "Result = %s(prodecl, ptr)" (nil ("embed") ("last_operation") ("type")))
   ("prn_return" fun nil (lib "prorend.pro" nil "markwardt") "Result = %s(prodecl, tree)" (nil))
   ("prn_ubop" fun nil (lib "prorend.pro" nil "markwardt") "Result = %s(prodecl, tree)" (nil ("binop") ("unop")))
   ("prn_assign" pro nil (lib "prorend.pro" nil "markwardt") "%s, prodecl, tree, text" (nil ("nstack") ("prefix")))
   ("prn_subscript" fun nil (lib "prorend.pro" nil "markwardt") "Result = %s(prodecl, tree, text)" (nil ("nstack")))
   ("prn_procall" pro nil (lib "prorend.pro" nil "markwardt") "%s, prodecl, tree, text" (nil ("funct") ("method") ("nstack") ("prefix") ("statement")))
   ("prn_array" fun nil (lib "prorend.pro" nil "markwardt") "Result = %s(prodecl, tree)" (nil))
   ("prn_pderef" fun nil (lib "prorend.pro" nil "markwardt") "Result = %s(prodecl, tree)" (nil))
   ("prn_for" pro nil (lib "prorend.pro" nil "markwardt") "%s, prodecl, tree, text" (nil ("nstack") ("prefix")))
   ("prn_if" pro nil (lib "prorend.pro" nil "markwardt") "%s, prodecl, tree, text" (nil ("nstack") ("prefix")))
   ("prn_while" pro nil (lib "prorend.pro" nil "markwardt") "%s, prodecl, tree, text" (nil ("nstack") ("prefix")))
   ("prn_tricond" fun nil (lib "prorend.pro" nil "markwardt") "Result = %s(prodecl, tree)" (nil))
   ("prn_onioerror" fun nil (lib "prorend.pro" nil "markwardt") "Result = %s(prodecl, tree)" (nil))
   ("prn_structref" fun nil (lib "prorend.pro" nil "markwardt") "Result = %s(prodecl, tree)" (nil))
   ("prn_struct" fun nil (lib "prorend.pro" nil "markwardt") "Result = %s(prodecl, tree)" (nil))
   ("prn_case" pro nil (lib "prorend.pro" nil "markwardt") "%s, prodecl, tree, text" (nil ("nstack") ("prefix")))
   ("prn_parse" pro nil (lib "prorend.pro" nil "markwardt") "%s, prodecl, tree, text" (nil ("last_operation") ("nstack") ("prefix")))
   ("prorend" pro nil (lib "prorend.pro" nil "markwardt") "%s, tree0, text" (nil ("init") ("mangle")))
   ("qpint1d_profile" pro nil (lib "qpint1d.pro" nil "markwardt") "%s" (nil ("clear")))
   ("qpint1d_setmachar" pro nil (lib "qpint1d.pro" nil "markwardt") "%s" (nil ("double")))
   ("qpint1d_qagse" pro nil (lib "qpint1d.pro" nil "markwardt") "%s, f, a0, b0, result, abserr, private" (nil ("alist") ("blist") ("breakpoints") ("elist") ("epsabs") ("epsrel") ("functargs") ("iord") ("isdouble") ("limit") ("neval") ("npoints") ("nsubintervals") ("rlist") ("status")))
   ("qpint1d_qkeval" pro nil (lib "qpint1d.pro" nil "markwardt") "%s, f, a, b, result, abserr, resabs, resasc, priv" (nil ("dirsign") ("functargs") ("inflow") ("isdouble") ("neval") ("npoints") ("reset")))
   ("qpint1d_qelg" pro nil (lib "qpint1d.pro" nil "markwardt") "%s, n, epstab, result, abserr, res3la, nres" (nil))
   ("qpint1d_qpsrt" pro nil (lib "qpint1d.pro" nil "markwardt") "%s, limit, last, maxerr, ermax, elist, iord, nrmax" (nil))
   ("qpint1d_gkweights" pro nil (lib "qpint1d.pro" nil "markwardt") "%s, wg, wgk, xgk, ig, nptsreq, nptsact, prec" (nil))
   ("qpint1d_eval" fun nil (lib "qpint1d.pro" nil "markwardt") "Result = %s(x, p)" (nil ("expression")))
   ("qpint1d" fun nil (lib "qpint1d.pro" nil "markwardt") "Result = %s(f0, a0, b0, private)" (nil ("alist") ("blist") ("breakpoints") ("elist") ("epsabs") ("epsrel") ("error") ("expression") ("functargs") ("iord") ("limit") ("nfev") ("nocatch") ("npoints") ("nsubintervals") ("rlist") ("status") ("sym_axis") ("symmetric")))
   ("qrsolv" fun nil (lib "qrsolv.pro" nil "markwardt") "Result = %s(q, r, b)" (nil ("pivots")))
   ("qtang" fun nil (lib "qtang.pro" nil "markwardt") "Result = %s(q)" (nil))
   ("qtaxis" fun nil (lib "qtaxis.pro" nil "markwardt") "Result = %s(q)" (nil))
   ("qtcompose" fun nil (lib "qtcompose.pro" nil "markwardt") "Result = %s(axis, phi)" (nil))
   ("qterp" fun nil (lib "qterp.pro" nil "markwardt") "Result = %s(t0, q0, t1)" (nil ("qdiff") ("reset") ("slerp")))
   ("qteuler_extract" pro nil (lib "qteuler.pro" nil "markwardt") "%s, ax, i, ei, angi, ang0, ang1, ang2, ang3, ang4, ang5, ang6, ang7, ang8, ang9" (nil ("errmsg") ("status")))
   ("qteuler" fun nil (lib "qteuler.pro" nil "markwardt") "Result = %s(axes, ang0, ang1, ang2, ang3, ang4, ang5, ang6, ang7, ang8, ang9, ang10, ang11, ang12, ang13, ang14, ang15)" (nil ("block")))
   ("qtexp" fun nil (lib "qtexp.pro" nil "markwardt") "Result = %s(q)" (nil))
   ("qtfind" fun nil (lib "qtfind.pro" nil "markwardt") "Result = %s(amat)" (nil))
   ("qtinv" fun nil (lib "qtinv.pro" nil "markwardt") "Result = %s(q)" (nil))
   ("qtlog" fun nil (lib "qtlog.pro" nil "markwardt") "Result = %s(q)" (nil))
   ("qtmat" fun nil (lib "qtmat.pro" nil "markwardt") "Result = %s(q)" (nil ("invert")))
   ("qtmult" fun nil (lib "qtmult.pro" nil "markwardt") "Result = %s(aqt, bqt)" (nil ("inv1") ("inv2")))
   ("qtmultn" fun nil (lib "qtmultn.pro" nil "markwardt") "Result = %s(qt1, qt2, qt3, qt4, qt5, qt6, qt7, qt8)" (nil ("inv1") ("inv2") ("inv3") ("inv4") ("inv5") ("inv6") ("inv7") ("inv8")))
   ("qtpow" fun nil (lib "qtpow.pro" nil "markwardt") "Result = %s(q, pow)" (nil))
   ("qtvrot" fun nil (lib "qtvrot.pro" nil "markwardt") "Result = %s(vin, q)" (nil ("invert")))
   ("relpath" pro nil (lib "relpath.pro" nil "markwardt") "%s, from0, to0, relpath" (nil ("cwd") ("file1") ("file2") ("invert")))
   ("tai_utc_preload" pro nil (lib "tai_utc.pro" nil "markwardt") "%s, strs, msg" (nil))
   ("tai_utc" fun nil (lib "tai_utc.pro" nil "markwardt") "Result = %s(jd)" (nil ("filename") ("invert") ("reset")))
   ("tdb2tdt_calc" fun nil (lib "tdb2tdt.pro" nil "markwardt") "Result = %s(jd)" (nil ("deriv") ("nterms") ("tbase")))
   ("tdb2tdt" fun nil (lib "tdb2tdt.pro" nil "markwardt") "Result = %s(jd)" (nil ("deriv") ("nterms") ("tbase")))
   ("value_locate" fun nil (lib "value_locate.pro" nil "markwardt") "Result = %s(xbins, x)" (nil ("_EXTRA") ("l64") ("no_crop")))))
